services:
  # n8n Service
  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    environment:
      - N8N_HOST=n8n.intplab.com
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://n8n.intplab.com/
      - GENERIC_TIMEZONE=America/Los_Angeles
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app_network
    ports:
      - "8000:5678"  # Expose n8n on host port 8000
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_LOAD_DEFINITIONS=/etc/rabbitmq/definitions.json
    networks:
      - app_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./definitions.json:/etc/rabbitmq/definitions.json
    ports:
      - "15672:15672" # RabbitMQ Management UI
      - "5672:5672"   # AMQP
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Redis
  redis:
    image: redis
    container_name: redis
    command: redis-server --save 60 1 --requirepass ${REDIS_PASSWORD} --loglevel warning
    networks:
      - app_network

    volumes:
      - redis_data:/data
    #ports:
     # - "6379:6379"
  # Flask App (API)
  flask_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask_app
    env_file:
      - .env
    volumes:
      - ./app/convertorData:/app/convertorData  
    networks:
      - app_network
    ports:
      - "5500:5000"  # Expose Flask app on host port 5500
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - app_network
    ports:
      - "9000:5000"  # Expose frontend on host port 9000
  celery_worker:
    build:
      context: .
    container_name: celery_worker
    command: >
      celery -A app.celery_app.celery worker --loglevel=INFO
    depends_on:
      flask_app:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./app/convertorData:/app/convertorData 
    networks:
      - app_network
  db:
    image: postgres:15
    container_name: db_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5432:5432"  # при необходимости доступ с хоста

networks:
  app_network:
    driver: bridge

volumes:
  n8n_data:
  app_data:
  postgres_data:
  rabbitmq_data:
  redis_data: